"use strict";function _classCallCheck(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function _assertBranch(e,n){var t=e.get(n);return t||e.set(n,t=new Map),t}function _getSize(e,n){if(--n,n<1)return e.size;var t=0,r=!0,i=!1,s=void 0;try{for(var o,a=e.values()[Symbol.iterator]();!(r=(o=a.next()).done);r=!0){var u=o.value;t+=_getSize(u,n)}}catch(e){i=!0,s=e}finally{try{!r&&a.return&&a.return()}finally{if(i)throw s}}return t}var _createClass=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}(),_mapResultKey=function(e,n){return n},_mapResultValue=function(e){return e[1]},_mapResultEntry=function(e,n){return[n,e[1]]},NDMapIterator=function e(n,t){var r=this;_classCallCheck(this,e);var i=[n._root.entries()],s=[],o=0;this.next=function(){var e=i[o].next();return e.done?(i[o]=null,s[o]=null,o?(--o,r.next()):{done:!0}):(s[o]=e.value[0],o===n._dimensions-1?(e.value=t(e.value,[].concat(s)),e):(++o,i[o]=e.value[1].entries(),r.next()))},this[Symbol.iterator]=function(){return this}},NDMap=function(){function e(n){if(_classCallCheck(this,e),this._dimensions=parseInt(n,10),!this._dimensions||this._dimensions<1)throw new Error("new NDMap: Dimensions must be > 0");this._root=new Map,this[Symbol.iterator]=function(){return this.entries()}}return _createClass(e,[{key:"_getEntry",value:function(e){for(var n=this._root,t=0;n&&t<e.length;t++)n=n.get(e[t]);return n}},{key:"clear",value:function(){this._root.clear()}},{key:"delete",value:function(){for(var e=arguments.length,n=Array(e),t=0;t<e;t++)n[t]=arguments[t];if(n.length!==this._dimensions)throw new Error("Number of keys given does not match dimensions. Have "+this._dimensions+" dimensions, and "+n.length+" keys");var r=n.pop(),i=this._getEntry(n);return!!i&&i.delete(r)}},{key:"get",value:function(){for(var e=arguments.length,n=Array(e),t=0;t<e;t++)n[t]=arguments[t];if(n.length!==this._dimensions)throw new Error("Number of keys given does not match dimensions. Have "+this._dimensions+" dimensions, and "+n.length+" keys");return this._getEntry(n)}},{key:"has",value:function(){for(var e=arguments.length,n=Array(e),t=0;t<e;t++)n[t]=arguments[t];if(n.length!==this._dimensions)throw new Error("Number of keys given does not match dimensions. Have "+this._dimensions+" dimensions, and "+n.length+" keys");var r=n.pop(),i=this._getEntry(n);return i&&i.has(r)||!1}},{key:"set",value:function(){for(var e=arguments.length,n=Array(e),t=0;t<e;t++)n[t]=arguments[t];var r=n.pop();if(n.length!==this._dimensions)throw new Error("Number of keys given does not match dimensions. Have "+this._dimensions+" dimensions, and "+n.length+" keys");for(var i=n.pop(),s=this._root,o=0;o<n.length;o++)s=_assertBranch(s,n[o]);s.set(i,r)}},{key:"entries",value:function(){return new NDMapIterator(this,_mapResultEntry)}},{key:"keys",value:function(){return new NDMapIterator(this,_mapResultKey)}},{key:"values",value:function(){return new NDMapIterator(this,_mapResultValue)}},{key:"forEach",value:function(e,n){var t=!0,r=!1,i=void 0;try{for(var s,o=this.entries()[Symbol.iterator]();!(t=(s=o.next()).done);t=!0){var a=s.value;e.call(n,a[1],a[0],this)}}catch(e){r=!0,i=e}finally{try{!t&&o.return&&o.return()}finally{if(r)throw i}}}},{key:"size",get:function(){return _getSize(this._root,this._dimensions)}}]),e}();module.exports=NDMap;